// <auto-generated />
using System;
using DoctorWho.Db.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorWho.Db.Migrations
{
    [DbContext(typeof(DoctorWhoCoreDbContext))]
    [Migration("20230225201325_CreateSP")]
    partial class CreateSP
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CompanionEpisode", b =>
                {
                    b.Property<int>("CompanionsCompanionId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodesEpisodeId")
                        .HasColumnType("int");

                    b.HasKey("CompanionsCompanionId", "EpisodesEpisodeId");

                    b.HasIndex("EpisodesEpisodeId");

                    b.ToTable("CompanionEpisode");

                    b.HasData(
                        new
                        {
                            CompanionsCompanionId = 7,
                            EpisodesEpisodeId = 2
                        },
                        new
                        {
                            CompanionsCompanionId = 7,
                            EpisodesEpisodeId = 3
                        },
                        new
                        {
                            CompanionsCompanionId = 8,
                            EpisodesEpisodeId = 3
                        },
                        new
                        {
                            CompanionsCompanionId = 7,
                            EpisodesEpisodeId = 4
                        },
                        new
                        {
                            CompanionsCompanionId = 9,
                            EpisodesEpisodeId = 4
                        },
                        new
                        {
                            CompanionsCompanionId = 7,
                            EpisodesEpisodeId = 5
                        },
                        new
                        {
                            CompanionsCompanionId = 10,
                            EpisodesEpisodeId = 5
                        },
                        new
                        {
                            CompanionsCompanionId = 7,
                            EpisodesEpisodeId = 6
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 23,
                            AuthorName = "Russell T Davies"
                        },
                        new
                        {
                            AuthorId = 29,
                            AuthorName = "Robert Shearman"
                        },
                        new
                        {
                            AuthorId = 30,
                            AuthorName = "Steven Moffat"
                        },
                        new
                        {
                            AuthorId = 32,
                            AuthorName = "James Moran"
                        },
                        new
                        {
                            AuthorId = 35,
                            AuthorName = "Terry Nation"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Companion", b =>
                {
                    b.Property<int>("CompanionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanionId"), 1L, 1);

                    b.Property<string>("CompanionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoPlayed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanionId");

                    b.ToTable("Companions");

                    b.HasData(
                        new
                        {
                            CompanionId = 7,
                            CompanionName = "Rose Tyler"
                        },
                        new
                        {
                            CompanionId = 8,
                            CompanionName = "Adam Mitchell"
                        },
                        new
                        {
                            CompanionId = 9,
                            CompanionName = "Jack Harkness"
                        },
                        new
                        {
                            CompanionId = 10,
                            CompanionName = "Mickey Smith"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstEpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEpisodeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DoctorName = "William Hartnell",
                            DoctorNumber = 1,
                            FirstEpisodeDate = new DateTime(1966, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(1966, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 2,
                            DoctorName = "Patrick Troughton",
                            DoctorNumber = 2,
                            FirstEpisodeDate = new DateTime(1966, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(1969, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 3,
                            DoctorName = "Jon Pertwee",
                            DoctorNumber = 3,
                            FirstEpisodeDate = new DateTime(1970, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(1974, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 9,
                            DoctorName = "Christopher Eccleston",
                            DoctorNumber = 9,
                            FirstEpisodeDate = new DateTime(2005, 3, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(2005, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DoctorId = 10,
                            DoctorName = "David Tennant",
                            DoctorNumber = 10,
                            FirstEpisodeDate = new DateTime(2005, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Enemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnemyId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnemyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnemyId");

                    b.ToTable("Enemies");

                    b.HasData(
                        new
                        {
                            EnemyId = 6,
                            EnemyName = "Lady Cassandra"
                        },
                        new
                        {
                            EnemyId = 7,
                            EnemyName = "Metaltron"
                        },
                        new
                        {
                            EnemyId = 8,
                            EnemyName = "Empty Child"
                        },
                        new
                        {
                            EnemyId = 9,
                            EnemyName = "Clockword Droid"
                        },
                        new
                        {
                            EnemyId = 11,
                            EnemyName = "Control Node"
                        },
                        new
                        {
                            EnemyId = 12,
                            EnemyName = "The Beast"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpisodeId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            EpisodeId = 2,
                            AuthorId = 23,
                            DoctorId = 9,
                            EpisodeDate = new DateTime(2005, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EpisodeNumber = 2,
                            EpisodeType = "Episode",
                            SeriesNumber = 1,
                            Title = "The End of the World"
                        },
                        new
                        {
                            EpisodeId = 3,
                            AuthorId = 29,
                            DoctorId = 9,
                            EpisodeDate = new DateTime(2005, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EpisodeNumber = 6,
                            EpisodeType = "Episode",
                            SeriesNumber = 1,
                            Title = "Dalek"
                        },
                        new
                        {
                            EpisodeId = 4,
                            AuthorId = 30,
                            DoctorId = 9,
                            EpisodeDate = new DateTime(2005, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EpisodeNumber = 10,
                            EpisodeType = "Episode",
                            SeriesNumber = 1,
                            Title = "The Doctor Dances"
                        },
                        new
                        {
                            EpisodeId = 5,
                            AuthorId = 30,
                            DoctorId = 10,
                            EpisodeDate = new DateTime(2006, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EpisodeNumber = 4,
                            EpisodeType = "Episode",
                            SeriesNumber = 2,
                            Title = "The Girl in the Fireplace"
                        },
                        new
                        {
                            EpisodeId = 6,
                            AuthorId = 32,
                            DoctorId = 10,
                            EpisodeDate = new DateTime(2006, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EpisodeNumber = 9,
                            EpisodeType = "Episode",
                            SeriesNumber = 2,
                            Title = "The Satan Pit"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.ViewEpisodes", b =>
                {
                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enemies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToView("viewEpisodes");
                });

            modelBuilder.Entity("EnemyEpisode", b =>
                {
                    b.Property<int>("EnemiesEnemyId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodesEpisodeId")
                        .HasColumnType("int");

                    b.HasKey("EnemiesEnemyId", "EpisodesEpisodeId");

                    b.HasIndex("EpisodesEpisodeId");

                    b.ToTable("EnemyEpisode");

                    b.HasData(
                        new
                        {
                            EnemiesEnemyId = 6,
                            EpisodesEpisodeId = 2
                        },
                        new
                        {
                            EnemiesEnemyId = 7,
                            EpisodesEpisodeId = 3
                        },
                        new
                        {
                            EnemiesEnemyId = 8,
                            EpisodesEpisodeId = 4
                        },
                        new
                        {
                            EnemiesEnemyId = 9,
                            EpisodesEpisodeId = 5
                        },
                        new
                        {
                            EnemiesEnemyId = 11,
                            EpisodesEpisodeId = 5
                        },
                        new
                        {
                            EnemiesEnemyId = 12,
                            EpisodesEpisodeId = 6
                        });
                });

            modelBuilder.Entity("CompanionEpisode", b =>
                {
                    b.HasOne("DoctorWho.Db.DataModels.Companion", null)
                        .WithMany()
                        .HasForeignKey("CompanionsCompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.DataModels.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodesEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Episode", b =>
                {
                    b.HasOne("DoctorWho.Db.DataModels.Author", "Author")
                        .WithMany("Episodes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.DataModels.Doctor", "Doctor")
                        .WithMany("Episodes")
                        .HasForeignKey("DoctorId");

                    b.Navigation("Author");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("EnemyEpisode", b =>
                {
                    b.HasOne("DoctorWho.Db.DataModels.Enemy", null)
                        .WithMany()
                        .HasForeignKey("EnemiesEnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.DataModels.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodesEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Author", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("DoctorWho.Db.DataModels.Doctor", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
